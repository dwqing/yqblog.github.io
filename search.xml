<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git 简单使用</title>
      <link href="/2023/09/28/17/13/git-jian-dan-shi-yong/"/>
      <url>/2023/09/28/17/13/git-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>配置Git</strong>：在使用Git之前，你需要配置你的用户名和电子邮件地址，以便Git能够识别你的身份。</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit config --global user.name "Your Name"git config --global user.email "youremail@example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>创建一个新的仓库</strong>：要在本地创建一个新的Git仓库，可以使用以下命令：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>克隆现有仓库</strong>：如果你想从远程仓库克隆代码到本地，可以使用以下命令：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit clone &lt;远程仓库URL&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>添加文件</strong>：将要跟踪的文件添加到Git仓库中：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit add &lt;文件名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>提交更改</strong>：提交已添加的文件到Git仓库，附上一条描述性的提交信息：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit commit -m "提交信息"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>查看状态</strong>：查看仓库中文件的状态，以确定哪些文件已修改或处于暂存状态：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>查看提交历史</strong>：查看已提交的历史记录，包括提交者、提交日期和提交消息：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>创建分支</strong>：创建一个新的分支，用于开发新功能或修复错误：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit branch &lt;分支名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>切换分支</strong>：切换到另一个分支：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit checkout &lt;分支名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>合并分支</strong>：将一个分支的更改合并到当前分支：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit merge &lt;分支名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>拉取和推送</strong>：从远程仓库获取最新的更改并将本地更改推送到远程仓库：</p><pre class="line-numbers language-none"><code class="language-none">bashCopy codegit pull origin &lt;分支名&gt;git push origin &lt;分支名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>习和使用。如果你想深入了解Git的更多内容，请查阅Git的官方文档或其他在线教程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glide的简单使用</title>
      <link href="/2023/04/03/23/19/glide-de-jian-dan-shi-yong/"/>
      <url>/2023/04/03/23/19/glide-de-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Glide的简单使用"><a href="#Glide的简单使用" class="headerlink" title="Glide的简单使用"></a>Glide的简单使用</h1><h2 id="1添加依赖"><a href="#1添加依赖" class="headerlink" title="1添加依赖"></a>1添加依赖</h2><p>在build.gradle文件中添加以下依赖：</p><pre class="line-numbers language-graphql" data-language="graphql"><code class="language-graphql"><span class="token object">dependencies</span> <span class="token punctuation">{</span>    <span class="token property">implementation</span> '<span class="token property">com</span>.<span class="token property">github</span>.<span class="token property">bumptech</span>.<span class="token attr-name">glide</span><span class="token punctuation">:</span><span class="token attr-name">glide</span><span class="token punctuation">:</span><span class="token number">4.12</span>.<span class="token number">0</span>'                     <span class="token property">annotationProcessor</span> '<span class="token property">com</span>.<span class="token property">github</span>.<span class="token property">bumptech</span>.<span class="token attr-name">glide</span><span class="token punctuation">:</span><span class="token attr-name">compiler</span><span class="token punctuation">:</span><span class="token number">4.12</span>.<span class="token number">0</span>'<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2添加网络权限"><a href="#2添加网络权限" class="headerlink" title="2添加网络权限"></a>2添加网络权限</h2><p>在 AndroidManifest.xml 添加网络权限：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3基础的使用"><a href="#3基础的使用" class="headerlink" title="3基础的使用"></a>3基础的使用</h2><h3 id="1添加网络图片-项目中经常用到的"><a href="#1添加网络图片-项目中经常用到的" class="headerlink" title="1添加网络图片(项目中经常用到的)"></a>1添加网络图片(项目中经常用到的)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token comment">//context是当前的activity</span>     <span class="token punctuation">.</span><span class="token function">asBitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//将图片转化为bitMao格式可能会比较清晰</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com/image.jpg"</span><span class="token punctuation">)</span> <span class="token comment">//图片的网络地址</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//你想要放置的图片位置</span><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>   <span class="token comment">//context是当前的activity</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com/image.jpg"</span><span class="token punctuation">)</span> <span class="token comment">//图片的网络地址</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//你想要放置的图片位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2加载本地的图片"><a href="#2加载本地的图片" class="headerlink" title="2加载本地的图片"></a>2加载本地的图片</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/path/to/image.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3加载资源目录图片"><a href="#3加载资源目录图片" class="headerlink" title="3加载资源目录图片"></a>3加载资源目录图片</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>image<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4从Assets目录中加载图片-目前还未了解"><a href="#4从Assets目录中加载图片-目前还未了解" class="headerlink" title="4从Assets目录中加载图片(目前还未了解)"></a>4从Assets目录中加载图片(目前还未了解)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"file:///android_asset/image.jpg"</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4显示占位符（加载过程的图片）和错误图片"><a href="#4显示占位符（加载过程的图片）和错误图片" class="headerlink" title="4显示占位符（加载过程的图片）和错误图片"></a>4显示占位符（加载过程的图片）和错误图片</h2><h3 id="1占位符"><a href="#1占位符" class="headerlink" title="1占位符"></a>1占位符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com/image.jpg"</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">placeholder</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>placeholder<span class="token punctuation">)</span> <span class="token comment">// in there</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2错误情况下的图片"><a href="#2错误情况下的图片" class="headerlink" title="2错误情况下的图片"></a>2错误情况下的图片</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com/image.jpg"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>error<span class="token punctuation">)</span>  <span class="token comment">//in there</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5其他的一些格式"><a href="#5其他的一些格式" class="headerlink" title="5其他的一些格式"></a>5其他的一些格式</h2><h3 id="1缩略图（可以在加载图片时先显示缩略图，待图片加载完毕后再显示原图）"><a href="#1缩略图（可以在加载图片时先显示缩略图，待图片加载完毕后再显示原图）" class="headerlink" title="1缩略图（可以在加载图片时先显示缩略图，待图片加载完毕后再显示原图）"></a>1缩略图（可以在加载图片时先显示缩略图，待图片加载完毕后再显示原图）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com/image.jpg"</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">thumbnail</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2圆角图"><a href="#2圆角图" class="headerlink" title="2圆角图"></a>2圆角图</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com/image.jpg"</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoundedCorners</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3圆形图片"><a href="#3圆形图片" class="headerlink" title="3圆形图片"></a>3圆形图片</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com/image.jpg"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token function">circleCropTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4模糊图片"><a href="#4模糊图片" class="headerlink" title="4模糊图片"></a>4模糊图片</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com/image.jpg"</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token function">bitmapTransform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BlurTransformation</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6自定义加载图片的格式（目前还看不太懂）"><a href="#6自定义加载图片的格式（目前还看不太懂）" class="headerlink" title="6自定义加载图片的格式（目前还看不太懂）"></a>6自定义加载图片的格式（目前还看不太懂）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImageLoader</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>load<span class="token punctuation">.</span>model<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>StreamModelLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">DataFetcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InputStream</span><span class="token punctuation">&gt;</span></span> <span class="token function">getResourceFetcher</span><span class="token punctuation">(</span><span class="token class-name">String</span> model<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span>   <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyDataFetcher</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDataFetcher</span> <span class="token keyword">implements</span> <span class="token class-name">DataFetcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InputStream</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyDataFetcher</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token class-name">Priority</span> priority<span class="token punctuation">,</span> <span class="token class-name">DataCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">InputStream</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 加载图片的逻辑</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>        callback<span class="token punctuation">.</span><span class="token function">onDataReady</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InputStream</span><span class="token punctuation">&gt;</span></span> <span class="token function">getDataClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">InputStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token constant">LOCAL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com/image.jpg"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7杂叙"><a href="#7杂叙" class="headerlink" title="7杂叙"></a>7杂叙</h2><h3 id="1圆形的显示"><a href="#1圆形的显示" class="headerlink" title="1圆形的显示"></a>1圆形的显示</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">Main_FriendsFragment</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token operator">+</span>mFriends<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomTarget</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//这里是和网络请求一样的东西</span>                           <span class="token annotation punctuation">@Override</span>                           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Drawable</span> resource<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Transition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Drawable</span><span class="token punctuation">&gt;</span></span> transition<span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BitmapDrawable</span><span class="token punctuation">)</span>resource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token class-name">RoundedBitmapDrawable</span> roundImg1<span class="token operator">=</span>                                   <span class="token class-name">RoundedBitmapDrawableFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>                               roundImg1<span class="token punctuation">.</span><span class="token function">setAntiAlias</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               roundImg1<span class="token punctuation">.</span><span class="token function">setCornerRadius</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               headImage<span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>roundImg1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置圆形图片的显示</span>                           <span class="token punctuation">}</span>                           <span class="token annotation punctuation">@Override</span>                           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadCleared</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Drawable</span> placeholder<span class="token punctuation">)</span> <span class="token punctuation">{</span>                           <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其解释：</p><p>Glide.into(new CustomTarget<drawable>())是使用Glide加载图片到一个自定义的目标中。</drawable></p><p>其中，CustomTarget<drawable>表示自定义的目标类型，它是Glide提供的一个接口，用于自定义图片的加载和显示方式。这个接口有两个方法：</drawable></p><ul><li>onResourceReady(T resource, Transition&lt;? super T&gt; transition)：当图片加载成功时，Glide会回调这个方法，并将加载成功的图片资源和一个过渡对象传入。</li><li>onLoadCleared(Drawable placeholder)：当图片加载被取消或清除时，Glide会回调这个方法，并将一个占位符Drawable对象传入。</li></ul><p>通过调用Glide.into()方法，将自定义的目标传入，Glide会根据目标类型，调用相应的方法，完成图片的加载和显示。在这个例子中，目标类型是CustomTarget<drawable>，表示加载的图片资源是一个Drawable对象。</drawable></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> glide </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retrofit的一些基本使用</title>
      <link href="/2023/03/29/15/55/retrofit-de-yi-xie-ji-ben-shi-yong/"/>
      <url>/2023/03/29/15/55/retrofit-de-yi-xie-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Retrofit的一些基本使用"><a href="#Retrofit的一些基本使用" class="headerlink" title="Retrofit的一些基本使用"></a>Retrofit的一些基本使用</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1添加Retrofit库的依赖"><a href="#1添加Retrofit库的依赖" class="headerlink" title="1添加Retrofit库的依赖"></a>1添加Retrofit库的依赖</h3><h4 id="1-1在Gradle里面加入Retrofit库的依赖"><a href="#1-1在Gradle里面加入Retrofit库的依赖" class="headerlink" title="1.1在Gradle里面加入Retrofit库的依赖"></a>1.1在Gradle里面加入Retrofit库的依赖</h4><p><em>build.gradle</em></p><pre class="line-numbers language-graphql" data-language="graphql"><code class="language-graphql"><span class="token object">dependencies</span> <span class="token punctuation">{</span>    <span class="token property">implementation</span> '<span class="token property">com</span>.<span class="token property">squareup</span>.<span class="token attr-name">retrofit2</span><span class="token punctuation">:</span><span class="token attr-name">retrofit</span><span class="token punctuation">:</span><span class="token number">2.4</span>.<span class="token number">0</span>'     <span class="token property">implementation</span> '<span class="token property">com</span>.<span class="token property">squareup</span>.<span class="token attr-name">retrofit2</span><span class="token punctuation">:</span><span class="token property">converter</span>-<span class="token attr-name">gson</span><span class="token punctuation">:</span><span class="token number">2.0</span>.<span class="token number">2</span>' //以<span class="token property">json</span>格式得到网络返回的数据类型，当然还有其他的数据类型，这里博主目前没有接触。<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&nbsp;1.1‘你也可以选择在</p><p><img src="C:\Users\祎\Desktop\屏幕截图%202023-03-29%20161057.png" alt="屏幕截图 2023-03-29 161057"></p><p>搜索最新的retrofit2库，注：implementation 在其他网站上面搜索的是compile，但是compile在3.0以上的Grade已经弃用当然也可以使用详细<a href="%5Bgradle%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96%E5%8F%8Adependencies%E4%B8%AD%E5%90%84%E7%A7%8D%E4%BE%9D%E8%B5%96%E6%96%B9%E5%BC%8F%E8%AF%B4%E6%98%8E_%E9%87%91%E7%A6%8F%E6%9E%97%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2%5D(https://jinfulin.blog.csdn.net/article/details/80421927?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-80421927-blog-89612508.235%5Ev27%5Epc_relevant_recovery_v2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-80421927-blog-89612508.235%5Ev27%5Epc_relevant_recovery_v2&amp;utm_relevant_index=2)">请见</a></p><h4 id="1-2添加网络权限"><a href="#1-2添加网络权限" class="headerlink" title="1.2添加网络权限"></a>1.2添加网络权限</h4><p><em><em>AndroidManifest.xml</em></em></p><p>添加</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-创建接收服务器返回数据的类（这里我先放在这里等下整理之后再写为了提醒自己更新）"><a href="#2-创建接收服务器返回数据的类（这里我先放在这里等下整理之后再写为了提醒自己更新）" class="headerlink" title="2 创建接收服务器返回数据的类（这里我先放在这里等下整理之后再写为了提醒自己更新）"></a>2 创建接收服务器返回数据的类（这里我先放在这里等下整理之后再写为了提醒自己更新）</h3><p>注:这一步很关键，有很多需要注意的内容，一不小心就有可能导致得不到返回数据（空指针错误）</p><p><em><em>Reception.java</em></em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reception</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 根据返回数据的格式和数据解析方式（Json、XML等）定义</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3创建自己想要传递到网络的类（GET请求一般没有）"><a href="#3创建自己想要传递到网络的类（GET请求一般没有）" class="headerlink" title="3创建自己想要传递到网络的类（GET请求一般没有）"></a>3创建自己想要传递到网络的类（GET请求一般没有）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Request</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 根据返回数据的格式和数据解析方式（Json、XML等）定义</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4创建-用于描述网络请求的接口"><a href="#4创建-用于描述网络请求的接口" class="headerlink" title="4创建 用于描述网络请求的接口"></a>4创建 用于描述网络请求的接口</h3><p><em><em>GetRequest_Interface.interface</em></em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GetRequest_Interface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"openapi.do?keyfrom=Yanzhikai&amp;key=2032414398&amp;type=data&amp;doctype=json&amp;version=1.1&amp;q=car"</span><span class="token punctuation">)</span>    <span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Translation</span><span class="token punctuation">&gt;</span></span>  <span class="token function">getCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的Translation是个栗子</span><span class="token comment">//Call&lt;Reception&gt;</span>  <span class="token comment">//@GET表示使用get的请求方式，括号内容是你需要请求网络的完整url的一部分下面会介绍</span>  <span class="token comment">//Call可以理解为你给网络打工电话,&lt;&gt;里面是返回数据的类</span>  <span class="token comment">// getCall();是你调用的方法，里面有时候会有参数。根据不同的接口要求不同</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里博主就简单介绍几种经常使用的网络请求方法</p><p>@GET（””）Call&lt;类&gt;  方法();  获得服务器上的数据</p><p>@PUST（””）Call&lt;类&gt; 方法(类 s);  将类 s的内容发送到服务器 //第一次</p><p>@PUT （””）Call&lt;类&gt; 方法（类 w）; 将s更新为w的内容</p><p>@HTTP 可以代替GET，POST，PUT，DELETE</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GetRequest_Interface</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * method：网络请求的方法（区分大小写）     * path：网络请求地址路径 //和上面（）里面内容一样     * hasBody：是否有请求体   就是有向网络发送的东西     */</span>    <span class="token annotation punctuation">@HTTP</span><span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"blog/{id}"</span><span class="token punctuation">,</span> hasBody <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCall</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// {id} 表示是一个变量  通过@Path可以做到动态请求不同的网络</span>    <span class="token comment">// method 的值 retrofit 不会做处理，所以要自行保证准确</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然还需要注意一点的是 方法参数需要注释名称（当然还有上传文件的会稍后介绍）</p><p>@Path，在上面有介绍</p><p>@Body  官方网站的解释是非表单请求，博主的目前能力所使用的是自己创建的类</p><p>@Hearder 表示请求头</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 是否同意添加好友   */</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"/api/v1/friend/pass"</span><span class="token punctuation">)</span>  <span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AddFriends_return</span><span class="token punctuation">&gt;</span></span> <span class="token function">agreeTobeFriend</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> <span class="token class-name">AddnewFriendSend</span> send<span class="token punctuation">,</span> <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5创建Retrofit实例"><a href="#5创建Retrofit实例" class="headerlink" title="5创建Retrofit实例"></a>5创建Retrofit实例</h3><p>完成以上步骤，基本上我们可以有了网络请求的基本工具辣。接下来，我们将使用这些工具来首先给网络数据和得到网络数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://116.204.121.9:61583/"</span><span class="token punctuation">)</span> <span class="token comment">//顾名思义根本的URl</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token class-name">GsonConverterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传递为json数据</span>        <span class="token class-name">Retrofit</span> retrofit <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//记住</span>        <span class="token class-name">FriendListInterface</span> friendListInterface <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">FriendListInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//FriendListInterface是接口类</span>        <span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FriendsList_return</span><span class="token punctuation">&gt;</span></span> call <span class="token operator">=</span> friendListInterface<span class="token punctuation">.</span><span class="token function">getFriendList</span><span class="token punctuation">(</span><span class="token class-name">User_Now</span><span class="token punctuation">.</span><span class="token function">getUserNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Call&lt;里面的内容要和接口方法写的一致&gt; </span> <span class="token comment">//这里我可以  Call&lt;other_return&gt; call2 = friendListInterface.其他方法（参数）; 但是前提是FriendlistInterface里面有这个接口</span>        call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FriendsList_return</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FriendsList_return</span><span class="token punctuation">&gt;</span></span> call<span class="token punctuation">,</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FriendsList_return</span><span class="token punctuation">&gt;</span></span> response<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//网络请求成功辣，response.body();就是得到的网络数据</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FriendsList_return</span><span class="token punctuation">&gt;</span></span> call<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">//网络请求失败辣</span>            <span class="token punctuation">}</span>                 <span class="token comment">//输入call.equeue(new )会自动补全异步操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对baseurl和上面@GET（””）等方法里面的内容解释。</p><p>假如一个完整的URl（俗称网络链接）为：<a href="http://116.204.121.9:61583/api/v1/drifting_drawing/draw">http://116.204.121.9:61583/api/v1/drifting_drawing/draw</a></p><p>那么baseUrl为<a href="http://116.204.121.9:61583/">http://116.204.121.9:61583/</a>        @GET(“api/v1/drifting_drawing/draw”)两者结合起来组成一个完整的URL 这样的好处就是你可以对多个相同baseURl的项目，创建一个retrofit实例，重复使用retrofit实例或者接口</p><p>call有同步和异步两种操作，这里只介绍异步</p>]]></content>
      
      
      <categories>
          
          <category> Retrofit </category>
          
          <category> Android studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言笔记</title>
      <link href="/2023/03/29/14/13/c-yu-yan-bi-ji/"/>
      <url>/2023/03/29/14/13/c-yu-yan-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博主先讲述了一些枯燥无聊但是有用的c语言基础知识，建议读者选择先行跳过第一章内容。待读者将C语言的基础用法读懂了理解之后，再回头来看，会有不一样的收获。是自己学习c语言的历程，难免会有不正确的地方，欢迎读者提出修改意见</p><h2 id="zhaji"><a href="#zhaji" class="headerlink" title="zhaji"></a>zhaji</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//a表示数组的第一个元素的地址。</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span>  a<span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n；a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token operator">*</span>a；<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> a；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1C语言基础知识（目前只是）"><a href="#1C语言基础知识（目前只是）" class="headerlink" title="1C语言基础知识（目前只是）"></a>1C语言基础知识（目前只是）</h2><h3 id="1-1什么是计算机程序"><a href="#1-1什么是计算机程序" class="headerlink" title="1.1什么是计算机程序"></a>1.1什么是计算机程序</h3><p>所谓的程序，就是一组计算机可以识别和执行的指令</p><h3 id="1-2什么是计算机语言"><a href="#1-2什么是计算机语言" class="headerlink" title="1.2什么是计算机语言"></a>1.2什么是计算机语言</h3><h4 id="1-2-1机械语言"><a href="#1-2-1机械语言" class="headerlink" title="1.2.1机械语言"></a>1.2.1机械语言</h4><p>因为计算机的硬件本质是电路，电路只有开和关这两种情况，所以就用0和1分别代表关闭和开启来控制电脑电路的闭合，达到想要的目的。</p><p>0和1指令，计算机发展的初期计算机的指令长度为16。栗子:1011011000000000（二进制代码/机器指令）</p><h4 id="1-2-2汇编语言-x2F-低级语言"><a href="#1-2-2汇编语言-x2F-低级语言" class="headerlink" title="1.2.2汇编语言/低级语言"></a>1.2.2汇编语言/低级语言</h4><p>由于机械语言的弊端不利于人们的学习和使用，所以汇编语言诞生了</p><p>栗子：ADD 代表加，SUB代表减，LD代表传送。 ADD A,B；代表将寄存器A中的数和寄存器B中的数相加。</p><p>虽然汇编语言比机械语言更加简单，但是还是难以普及，一般专业人士才会使用。</p><h4 id="1-2-3高级语言"><a href="#1-2-3高级语言" class="headerlink" title="1.2.3高级语言"></a>1.2.3高级语言</h4><p>$$<br>第一个计算机的高级语言是：FORTRAN  栗子： 计算和输出 3.5*6sin(Π/3)。<br>$$</p><pre class="line-numbers language-fortran" data-language="fortran"><code class="language-fortran"><span class="token keyword">PRINT</span> <span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">*</span>SIN<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然计算机不可能认识高级语言，这时候就需要一个“翻译官”（编译器）</p><h6 id="高级语言的发展阶段："><a href="#高级语言的发展阶段：" class="headerlink" title="高级语言的发展阶段："></a>高级语言的发展阶段：</h6><p>1非结构化的语言：早期的BASIC，FORTRAN和ALGOL等</p><p>2结构化语言：QBASIC，FORTRAN77和c语言</p><p>3面向对象的语言：C++，C#，Visual Basic，Java等</p><h3 id="1-3C语言的发展和优点："><a href="#1-3C语言的发展和优点：" class="headerlink" title="1.3C语言的发展和优点："></a>1.3C语言的发展和优点：</h3><p>C89到C99,优点挺多即使有很多高级方便的语言，但是还是无法撼动c语言的地位（这里博主就不一一介绍）</p><h3 id="1-4一个最简单的C语言程序"><a href="#1-4一个最简单的C语言程序" class="headerlink" title="1.4一个最简单的C语言程序"></a>1.4一个最简单的C语言程序</h3><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span> <span class="token comment">//这是编译预处理指令</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">//定义主函数</span><span class="token punctuation">{</span>                 <span class="token comment">//函数开始的方法      </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这是一个c语言"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出所指定的一行信息</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//函数执行完毕时返回函数值0</span><span class="token punctuation">}</span>                 <span class="token comment">//函数结束的标志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于初学者来说可以理解为一个模板</p><p>{</p><p>  在这里面做自己想做的事情；</p><p>}</p><h4 id="当然这里还是要对其内容就行解释。"><a href="#当然这里还是要对其内容就行解释。" class="headerlink" title="当然这里还是要对其内容就行解释。"></a>当然这里还是要对其内容就行解释。</h4><p>首先来解释第二行 ：</p><p> int main（）{return 0;}代表一个函数。</p><p>int 代表整型 ，return x; x代表函数的最终得到的值,int 的限制代表x的类型这只能是整型</p><p>main 是函数的名字 main “主函数”，顾名思义主要的函数，main函数是c语言必不可少的一个函数。</p><p>()代表传递的参数值，这里为空，后面将自定义函数的时候会详细解释</p><p>{}是函数的开始和结束的标准。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span> <span class="token comment">//预处理指令</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>stdio是standard input&amp;output 的缩写 h是hearder file（头文件）</p><p>stdio.h放在输入和输出函数的系统提供的文件，有了这个你才可以使用printf（）函数</p><p>include的意思是在代码编译的时候将stdio.h文件内容导入进去。</p><p>当然还有其他的文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h&gt;</span> <span class="token comment">//导入之后可以使用一些数学函数</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多请见：（这里后续更新一个超链接）</p><h3 id="1-5C语言的编译和运行"><a href="#1-5C语言的编译和运行" class="headerlink" title="1.5C语言的编译和运行"></a>1.5C语言的编译和运行</h3><h4 id="1首先需要人工输入代码"><a href="#1首先需要人工输入代码" class="headerlink" title="1首先需要人工输入代码"></a>1首先需要人工输入代码</h4><h4 id="2编译器对源程序进行预处理"><a href="#2编译器对源程序进行预处理" class="headerlink" title="2编译器对源程序进行预处理"></a>2编译器对源程序进行预处理</h4><p>将&lt;stdio.h&gt;等内的文件和人工写的内容拼接起来得到一个源程序</p><h4 id="3正式编译"><a href="#3正式编译" class="headerlink" title="3正式编译"></a>3正式编译</h4><p>检查是否有语言错误，转化为二进制源文件（后缀.obj）</p><h4 id="4连接处理"><a href="#4连接处理" class="headerlink" title="4连接处理"></a>4连接处理</h4><p>1如果一个项目有多个c程序，将多个c程序的obj文件连接起来；</p><p>2和函数库联系起来</p><p>最终得到exe文件（可以直接运行）</p><h3 id="1-6C语言的数据类型（完整的可查阅资料）"><a href="#1-6C语言的数据类型（完整的可查阅资料）" class="headerlink" title="1.6C语言的数据类型（完整的可查阅资料）"></a>1.6C语言的数据类型（完整的可查阅资料）</h3><table><thead><tr><th>整型</th><th>int （4个字节）</th><th>short （2）</th><th>long（8）</th><th>char（每一个字符在AsII表内代表的数字）</th><th>bool（true =1，false = 0）</th><th>long long</th></tr></thead><tbody><tr><td>浮点型</td><td>float（单精度）</td><td>double（双精度）</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>其中一个字节代表8位长的二进制，也就是说int 的范围为 （第一位存+/-）2的31次方减一到 -2的31次方  （其中你也可以 unsigned int则无负数）</p><h5 id="定义数据"><a href="#定义数据" class="headerlink" title="定义数据"></a>定义数据</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">//这个过程会分配a一个4字节地址，而5就存储在这个4字节的地址当中。可以理解为分配一个黑箱子，箱子里面装这5这个数，且最多能装</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-7一些运算符和优先级"><a href="#1-7一些运算符和优先级" class="headerlink" title="1.7一些运算符和优先级"></a>1.7一些运算符和优先级</h4><h3 id="C语言的基础语法"><a href="#C语言的基础语法" class="headerlink" title="C语言的基础语法"></a>C语言的基础语法</h3><h3 id="1输入和输出"><a href="#1输入和输出" class="headerlink" title="1输入和输出"></a>1输入和输出</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//%d代表是整数 ， &amp;的取地址符号 %f代表浮点型 %s是字符型</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好呀！老狗"</span><span class="token punctuation">)</span>        <span class="token comment">//printf可以直接输出字符串，也可以在字符串中加变量值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你%d岁"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> a<span class="token punctuation">;</span>    <span class="token keyword">float</span> b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%dwww%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意这是错误的示范也是scanf函数经常出现的错误，scanf里面尽量不要出现别的字符</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&amp;不要忘记</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然一些简单的运算和数学还是一样的(更加复杂的运算需要了解运算优先级和顺序)请见（后续找到资料添加超链接）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好呀！老狗"</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> n<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">;</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你%d岁"</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2判断"><a href="#2判断" class="headerlink" title="2判断"></a>2判断</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">//括号里面是布尔型0是false的 非0是正确的</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"对的"</span><span class="token punctuation">)</span>    <span class="token comment">//do something1</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"错的"</span><span class="token punctuation">)</span>    <span class="token comment">//do something2</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//do1</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//d02</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//do3</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment">//d03</span><span class="token punctuation">}</span><span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老狗1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老狗2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老狗3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老狗4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老狗5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment">//注意break必不可少，</span><span class="token punctuation">}</span><span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老狗1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老狗2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老狗3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老狗4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老狗5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//a =1 的时候输出老狗1老狗2老狗3老狗4老狗5</span>                               <span class="token comment">//a = 2 输出老狗2老狗3老狗4老狗5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3循环"><a href="#3循环" class="headerlink" title="3循环"></a>3循环</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//do while</span><span class="token comment">//先做后判断</span><span class="token keyword">do</span><span class="token punctuation">{</span>    <span class="token comment">//do something</span>    <span class="token comment">//跌倒</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//while</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//do someting</span>   <span class="token comment">//迭代</span><span class="token punctuation">}</span><span class="token comment">//初始化和跌打可以有多个，判断条件也可以有多个</span><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span>判断条件<span class="token punctuation">;</span>迭代<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//do someting</span><span class="token punctuation">}</span><span class="token comment">//1e-6   10的-6次方</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//c89不能在里面定义，要在外边</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4数组"><a href="#4数组" class="headerlink" title="4数组"></a>4数组</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组名+字节*偏移量</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token comment">//计算过程 ,a代表数组开始的第一个占的字节 ，4不过是int 的字节数，有时候用sizeOf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（笔记如果全局变量和局部变量冲突以局部变量为准）</p><p>（数组的名称作为变量传递给函数，传递的是地址）</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firstLayout</title>
      <link href="/2023/03/28/17/05/firstlayout/"/>
      <url>/2023/03/28/17/05/firstlayout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github博客搭建记录</title>
      <link href="/2023/03/28/16/55/hexo-github-bo-ke-da-jian-ji-lu/"/>
      <url>/2023/03/28/16/55/hexo-github-bo-ke-da-jian-ji-lu/</url>
      
        <content type="html"><![CDATA[<hr><p>NothingNow</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/03/28/11/16/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2023/03/28/11/16/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="段"><a href="#段" class="headerlink" title="段"></a>段</h1><p>$$<br>1+1 = 3<br>$$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/28/00/45/hello-world/"/>
      <url>/2023/03/28/00/45/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
